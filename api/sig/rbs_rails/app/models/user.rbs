class User < ::ApplicationRecord
  extend _ActiveRecord_Relation_ClassMethods[User, ActiveRecord_Relation, Integer]

  module GeneratedAttributeMethods
    def id: () -> Integer

    def id=: (Integer) -> Integer

    def id?: () -> bool

    def id_changed?: () -> bool

    def id_change: () -> [ Integer?, Integer? ]

    def id_will_change!: () -> void

    def id_was: () -> Integer?

    def id_previously_changed?: () -> bool

    def id_previous_change: () -> Array[Integer?]?

    def id_previously_was: () -> Integer?

    def id_before_last_save: () -> Integer?

    def id_change_to_be_saved: () -> Array[Integer?]?

    def id_in_database: () -> Integer?

    def saved_change_to_id: () -> Array[Integer?]?

    def saved_change_to_id?: () -> bool

    def will_save_change_to_id?: () -> bool

    def restore_id!: () -> void

    def clear_id_change: () -> void

    def email: () -> String

    def email=: (String) -> String

    def email?: () -> bool

    def email_changed?: () -> bool

    def email_change: () -> [ String?, String? ]

    def email_will_change!: () -> void

    def email_was: () -> String?

    def email_previously_changed?: () -> bool

    def email_previous_change: () -> Array[String?]?

    def email_previously_was: () -> String?

    def email_before_last_save: () -> String?

    def email_change_to_be_saved: () -> Array[String?]?

    def email_in_database: () -> String?

    def saved_change_to_email: () -> Array[String?]?

    def saved_change_to_email?: () -> bool

    def will_save_change_to_email?: () -> bool

    def restore_email!: () -> void

    def clear_email_change: () -> void

    def password_digest: () -> String

    def password_digest=: (String) -> String

    def password_digest?: () -> bool

    def password_digest_changed?: () -> bool

    def password_digest_change: () -> [ String?, String? ]

    def password_digest_will_change!: () -> void

    def password_digest_was: () -> String?

    def password_digest_previously_changed?: () -> bool

    def password_digest_previous_change: () -> Array[String?]?

    def password_digest_previously_was: () -> String?

    def password_digest_before_last_save: () -> String?

    def password_digest_change_to_be_saved: () -> Array[String?]?

    def password_digest_in_database: () -> String?

    def saved_change_to_password_digest: () -> Array[String?]?

    def saved_change_to_password_digest?: () -> bool

    def will_save_change_to_password_digest?: () -> bool

    def restore_password_digest!: () -> void

    def clear_password_digest_change: () -> void

    def profile: () -> String?

    def profile=: (String?) -> String?

    def profile?: () -> bool

    def profile_changed?: () -> bool

    def profile_change: () -> [ String?, String? ]

    def profile_will_change!: () -> void

    def profile_was: () -> String?

    def profile_previously_changed?: () -> bool

    def profile_previous_change: () -> Array[String?]?

    def profile_previously_was: () -> String?

    def profile_before_last_save: () -> String?

    def profile_change_to_be_saved: () -> Array[String?]?

    def profile_in_database: () -> String?

    def saved_change_to_profile: () -> Array[String?]?

    def saved_change_to_profile?: () -> bool

    def will_save_change_to_profile?: () -> bool

    def restore_profile!: () -> void

    def clear_profile_change: () -> void

    def created_at: () -> ActiveSupport::TimeWithZone

    def created_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def created_at?: () -> bool

    def created_at_changed?: () -> bool

    def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def created_at_will_change!: () -> void

    def created_at_was: () -> ActiveSupport::TimeWithZone?

    def created_at_previously_changed?: () -> bool

    def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_created_at?: () -> bool

    def will_save_change_to_created_at?: () -> bool

    def restore_created_at!: () -> void

    def clear_created_at_change: () -> void

    def updated_at: () -> ActiveSupport::TimeWithZone

    def updated_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def updated_at?: () -> bool

    def updated_at_changed?: () -> bool

    def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def updated_at_will_change!: () -> void

    def updated_at_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_previously_changed?: () -> bool

    def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_updated_at?: () -> bool

    def will_save_change_to_updated_at?: () -> bool

    def restore_updated_at!: () -> void

    def clear_updated_at_change: () -> void
  end
  include GeneratedAttributeMethods
  def skills: () -> Skill::ActiveRecord_Associations_CollectionProxy
  def skills=: (Skill::ActiveRecord_Associations_CollectionProxy | Array[Skill]) -> (Skill::ActiveRecord_Associations_CollectionProxy | Array[Skill])
  def skill_ids: () -> Array[Integer]
  def skill_ids=: (Array[Integer]) -> Array[Integer]
  def avatar_attachment: () -> ActiveStorage::Attachment?
  def avatar_attachment=: (ActiveStorage::Attachment?) -> ActiveStorage::Attachment?
  def build_avatar_attachment: (untyped) -> ActiveStorage::Attachment
  def create_avatar_attachment: (untyped) -> ActiveStorage::Attachment
  def create_avatar_attachment!: (untyped) -> ActiveStorage::Attachment
  def reload_avatar_attachment: () -> ActiveStorage::Attachment?
  def avatar_blob: () -> ActiveStorage::Blob?
  def avatar_blob=: (ActiveStorage::Blob?) -> ActiveStorage::Blob?
  def build_avatar_blob: (untyped) -> ActiveStorage::Blob
  def create_avatar_blob: (untyped) -> ActiveStorage::Blob
  def create_avatar_blob!: (untyped) -> ActiveStorage::Blob
  def reload_avatar_blob: () -> ActiveStorage::Blob?

  module GeneratedAssociationMethods
    def avatar: () -> ActiveStorage::Attached::One

    def avatar=: (ActionDispatch::Http::UploadedFile) -> ActionDispatch::Http::UploadedFile
               | (Rack::Test::UploadedFile) -> Rack::Test::UploadedFile
               | (ActiveStorage::Blob) -> ActiveStorage::Blob
               | (String) -> String
               | ({ io: IO, filename: String, content_type: String? }) -> { io: IO, filename: String, content_type: String? }
               | (nil) -> nil
  end
  include GeneratedAssociationMethods
  module ActiveModel_SecurePassword_InstanceMethodsOnActivation_password
    attr_reader password: String?

    def password=: (String) -> String

    def password_confirmation=: (String) -> String

    def authenticate_password: (String) -> (User | false)

    alias authenticate authenticate_password
  end
  include ActiveModel_SecurePassword_InstanceMethodsOnActivation_password

  def self.with_attached_avatar: () -> ActiveRecord_Relation

  module GeneratedRelationMethods
    def with_attached_avatar: () -> ActiveRecord_Relation
  end

  class ActiveRecord_Relation < ::ActiveRecord::Relation
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[User, Integer]
    include Enumerable[User]
  end

  class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[User, Integer]
  end
end
